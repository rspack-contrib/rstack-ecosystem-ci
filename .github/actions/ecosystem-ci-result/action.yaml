name: "Eco CI Result"
description: "Fetch ecosystem CI jobs for a run and format a markdown summary"

inputs:
  workflow-output:
    description: "JSON stringified output returned by trigger-workflow-and-wait"
    required: true
  job-prefix:
    description: "Job name prefix to include in the summary table"
    required: false
    default: "execute-all "
  heading:
    description: "Short sentence describing the executed workflow"
    required: false
    default: "Ran ecosystem CI"

outputs:
  summary:
    description: "Formatted markdown summary of the ecosystem CI jobs"
    value: ${{ steps.get-result.outputs.summary }}
  results:
    description: "JSON string with workflow URL, run id, and suite entries"
    value: ${{ steps.get-result.outputs.results }}

runs:
  using: composite
  steps:
    - id: get-result
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
      env:
        CI_OUTPUT: ${{ inputs.workflow-output }}
        JOB_PREFIX: ${{ inputs.job-prefix }}
        HEADING: ${{ inputs.heading }}
      with:
        script: |
          const owner = "rspack-contrib";
          const repo = "rstack-ecosystem-ci";
          const jobPrefix = process.env.JOB_PREFIX ?? 'execute-all ';
          const rawHeading = process.env.HEADING;
          const heading = typeof rawHeading === 'string' ? rawHeading.charAt(0).toUpperCase() + rawHeading.slice(1) + ' Ecosystem CI' : 'Ran ecosystem CI';

          let runId;
          try {
            const parsed = JSON.parse(process.env.CI_OUTPUT);
            runId = parsed?.workflow_id ?? parsed?.runId ?? parsed?.run_id;
          } catch (error) {
            throw new Error(`failed to parse workflow output: ${error}`);
          }

          const emitFallback = (message, url = '', workflowRunId = '') => {
            core.setOutput('summary', message);
            core.setOutput(
              'results',
              JSON.stringify({
                workflowUrl: url,
                workflowRunId,
                suites: [],
              }),
            );
            return message;
          };

          if (!runId) {
            return emitFallback('cannot determine workflow run id');
          }

          const { data: { jobs } = {} } =
            await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: runId,
            });

          if (!jobs?.length) {
            const workflowUrl =
              `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            return emitFallback('cannot find CI result', workflowUrl, String(runId));
          }

          const suites = jobs
            .filter((job) => job.name?.startsWith(jobPrefix))
            .map((job) => {
              let suiteName = job.name.substring(jobPrefix.length);
              if (suiteName.startsWith('(') && suiteName.endsWith(')')) {
                suiteName = suiteName.slice(1, -1);
              }
              return {
                suite: suiteName,
                conclusion: job.conclusion,
                link: job.html_url,
              };
            });

          const workflowUrl =
            `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
          const url = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
          const urlLink = `[Open](${url})`;

          const conclusionEmoji = {
            success: ':white_check_mark:',
            failure: ':x:',
            cancelled: ':stop_button:',
          };

          const rows = suites
            .map(
              (r) =>
                `| [${r.suite}](${r.link}) | ${conclusionEmoji[r.conclusion] ?? ''} ${r.conclusion} |`,
            )
            .join('\n');

          const body = `
          üìù ${heading}: ${urlLink}

          | suite | result |
          |-------|--------|
          ${rows}
          `;

          const trimmed = body.trim();
          core.setOutput('summary', trimmed);
          core.setOutput(
            'results',
            JSON.stringify({
              workflowUrl,
              workflowRunId: String(runId),
              suites,
            }),
          );

          return trimmed;
