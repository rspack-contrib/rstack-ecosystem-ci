name: 'Eco CI Result'
description: 'Fetch ecosystem CI jobs for a run and format a markdown summary'

inputs:
  workflow-output:
    description: 'JSON stringified output returned by trigger-workflow-and-wait'
    required: true
  owner:
    description: 'GitHub owner of the ecosystem CI repository'
    required: false
    default: 'rspack-contrib'
  repo:
    description: 'GitHub repository containing the ecosystem CI workflow'
    required: true
  job-prefix:
    description: 'Job name prefix to include in the summary table'
    required: false
    default: 'execute-all '
  heading:
    description: 'Short sentence describing the executed workflow'
    required: false
    default: 'Ran ecosystem CI'

outputs:
  result:
    description: 'Formatted markdown summary of the ecosystem CI jobs'
    value: ${{ steps.get-result.outputs.result }}

runs:
  using: composite
  steps:
    - id: get-result
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
      env:
        CI_OUTPUT: ${{ inputs.workflow-output }}
        OWNER: ${{ inputs.owner }}
        REPO: ${{ inputs.repo }}
        JOB_PREFIX: ${{ inputs.job-prefix }}
        HEADING: ${{ inputs.heading }}
      with:
        script: |
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const jobPrefix = process.env.JOB_PREFIX ?? 'execute-all ';
          const heading = process.env.HEADING ?? 'Ran ecosystem CI';

          if (!owner || !repo) {
            throw new Error('eco-ci-result requires both owner and repo inputs');
          }

          let runId;
          try {
            const parsed = JSON.parse(process.env.CI_OUTPUT);
            runId = parsed?.workflow_id ?? parsed?.runId ?? parsed?.run_id;
          } catch (error) {
            throw new Error(`failed to parse workflow output: ${error}`);
          }

          if (!runId) {
            return 'cannot determine workflow run id';
          }

          const { data: { jobs } = {} } =
            await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: runId,
            });

          if (!jobs?.length) {
            return 'cannot find CI result';
          }

          const result = jobs
            .filter((job) => job.name?.startsWith(jobPrefix))
            .map((job) => {
              let suiteName = job.name.substring(jobPrefix.length);
              if (suiteName.startsWith('(') && suiteName.endsWith(')')) {
                suiteName = suiteName.slice(1, -1);
              }
              return {
                suite: suiteName,
                conclusion: job.conclusion,
                link: job.html_url,
              };
            });

          const url = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
          const urlLink = `[Open](${url})`;

          const conclusionEmoji = {
            success: ':white_check_mark:',
            failure: ':x:',
            cancelled: ':stop_button:',
          };

          const rows = result
            .map(
              (r) =>
                `| [${r.suite}](${r.link}) | ${conclusionEmoji[r.conclusion] ?? ''} ${r.conclusion} |`,
            )
            .join('\n');

          const body = `
          📝 ${heading}: ${urlLink}

          | suite | result |
          |-------|--------|
          ${rows}
          `;

          return body;
